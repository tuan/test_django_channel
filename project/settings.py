"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import re
import secrets
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    # casting, default value
    DEBUG=(bool, False),
    # root log level
    LOG_LEVEL_CONFIG=(str, "WARNING"),
    # papertrail logging
    PAPERTRAIL_ADDRESS=(str, ""),
    PAPERTRAIL_PORT=(int, 0),
    PAPERTRAIL_APP_NAME=(str, BASE_DIR.name),
    PAPERTRAIL_LOG_LEVEL=(str, "WARNING"),
    # mail
    EMAIL_BACKEND_TYPE=(str, "CONSOLE"),
    POSTMARK_SERVER_TOKEN=(str, ""),
    # cache
    REDIS_URL=(str, ""),
    REDIS_KEY_PREFIX=(str, BASE_DIR.name),
    CACHE_TTL=(int, 60 * 15),  # 15 mins
    # celery
    CELERY_BROKER_URL=(str, ""),
)


# Take environment variables from .env file
environ.Env.read_env(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY", default=secrets.token_urlsafe(50))  # type: ignore

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = ["127.0.0.1", "localhost"]


# Application definition

INSTALLED_APPS = [
    # ASGI
    "daphne",
    # for channels runworker command
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    # needs to be before staticfiles
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    # for sending mails
    "anymail",
    # allauth
    "allauth",
    "allauth.account",
    # my apps
    "authuser",
    "django_vite",
    "home",
    # using celery to send emails
    "djcelery_email",
    # celery
    "django_celery_results",
    "django_celery_beat",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # allauth middleware
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # allauth needs this from django
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"
ASGI_APPLICATION = "project.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


CACHE_TTL = env("CACHE_TTL")
# https://docs.djangoproject.com/en/5.0/topics/cache/#redis
if REDIS_URL := env("REDIS_URL"):
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": REDIS_URL,
            "KEY_PREFIX": env("REDIS_KEY_PREFIX"),
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "authuser.User"

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Los_Angeles"

USE_I18N = True

USE_TZ = True

# Django Vite
# 5173 is the port of vite devserver
DJANGO_VITE = {
    "default": {
        "dev_mode": DEBUG,
        # 5173 is the port of vite devserver
        "dev_server_port": 5173,
        # vite should match the settings in vite.config.ts
        "static_url_prefix": "vite",
    }
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "collectedstatic"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# client/dist should match the outDir location configured in vite.config.ts
# vite namespace should match `static_url_prefix`
STATICFILES_DIRS = [("vite", BASE_DIR / "jsclient" / "dist"), BASE_DIR / "static"]
# Vite generates files with 8 hash digits
# http://whitenoise.evans.io/en/stable/django.html#WHITENOISE_IMMUTABLE_FILE_TEST


def immutable_file_test(path, url):
    # Match filename with 12 hex digits before the extension
    # e.g. app.db8f2edc0c8a.js
    return re.match(r"^.+[\.\-][0-9a-f]{8,12}\..+$", url)


WHITENOISE_IMMUTABLE_FILE_TEST = immutable_file_test


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {"format": "%(asctime)s - %(levelname)s - %(name)s - %(message)s"},
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "papertrail": {
            "format": (
                f"{env('PAPERTRAIL_APP_NAME')} %(asctime)s - %(levelname)s - %(name)s -"
                " %(message)s"
            )
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "maxBytes": 5242880,  # 5 MB
            "backupCount": 5,  # Keep 5 old log files
            "formatter": "verbose",
            "filename": BASE_DIR / "logs" / "debug.log",
        },
        "papertrail": {
            "level": env("PAPERTRAIL_LOG_LEVEL"),
            "class": "logging.handlers.SysLogHandler",
            "formatter": "papertrail",
            "address": (env("PAPERTRAIL_ADDRESS"), env("PAPERTRAIL_PORT")),
        },
    },
    "root": {
        "handlers": ["console"] + (
            ["papertrail"]
            if env("PAPERTRAIL_ADDRESS") and env("PAPERTRAIL_PORT")
            else ["file"]
        ),
        "level": env("LOG_LEVEL_CONFIG"),
    },
}

# Redirect to home URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = "/"

# Configures django allauth to use email as the identifying field and do not collect usernames
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "email"

EMAIL_BACKEND = "djcelery_email.backends.CeleryEmailBackend"
match env("EMAIL_BACKEND_TYPE"):
    case "POSTMARK":
        CELERY_EMAIL_BACKEND = "anymail.backends.postmark.EmailBackend"
        ANYMAIL = {"POSTMARK_SERVER_TOKEN": env("POSTMARK_SERVER_TOKEN")}
        DEFAULT_FROM_EMAIL = "mail@tentativeknowledge.com"
        SERVER_EMAIL = (  # default from-email for Django errors
            "mail@tentativeknowledge.com"
        )
    case _:
        CELERY_EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


# Celery settings
CELERY_BROKER_URL = env("CELERY_BROKER_URL")

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = "django-cache"
CELERY_TASK_SERIALIZER = "json"

# scheduler with admin interface
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
